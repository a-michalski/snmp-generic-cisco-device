#!/usr/bin/env python
import argparse
import json
import pathlib
import sys
import yaml
import enum

import jsonschema

class AcquisitionMethod(enum.Enum):
    Json = enum.auto()
    Yaml = enum.auto()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--instance", default="extension.json")
    parser.add_argument("--schemas-entrypoint", default="extension.schema.json")
    parser.add_argument("schemas_location")

    args = parser.parse_args()
    instance_path = args.instance
    schema_entrypoint_path = f"{args.schemas_location}/{args.schemas_entrypoint}"
    subschemas_path = args.schemas_location

    try:
        with open(instance_path, "r") as f:
            instance, method = json.load(f), AcquisitionMethod.Json
    except json.decoder.JSONDecodeError:
        with open(instance_path, "r") as yaml_in:
            instance, method = yaml.safe_load(yaml_in), AcquisitionMethod.Yaml

    assert isinstance(method, AcquisitionMethod)

    with open(schema_entrypoint_path) as f:
        s = json.load(f)

    schema_store = {}
    for f in [f for f in pathlib.Path(subschemas_path).iterdir() if f.is_file()]:
        try:
            with open(f) as _f:
                sub = json.load(_f)
        except json.decoder.JSONDecodeError:
            print(f"skipping subschema {f}, malformed json", file=sys.stderr)
        else:
            sub_id = sub["$id"]
            schema_store[sub_id] = sub

    resolver = jsonschema.validators.RefResolver.from_schema(s, store=schema_store)

    _v = jsonschema.validators.validator_for(s)
    _v.check_schema(s)
    v = _v(s, resolver=resolver)

    invalid = False
    for i, error in enumerate(v.iter_errors(instance)):
        invalid = True
        # TODO: add line info - might need to differenciate between json and yaml source, currently we'll focus on yaml and provide a null response on json -> use method varaible
        # TODO: add typo finder for some cases - like enum mismatch
        print(f"{10* '-'} error {i} {10* '-'}", file=sys.stderr)
        print("location:", ".".join(map(str, error.absolute_path)), file=sys.stderr)
        print("cause:", error.message, file=sys.stderr)

    if invalid:
        print(f"{5* '-'} {i + 1} errors total, aborting! {5* '-'}", file=sys.stderr)
    exit(invalid)


if __name__ == "__main__":
    main()
